"use client";

import { cn } from "@zknoid/sdk/lib/helpers";
import Image from "next/image";
import TicketBG1 from "../assets/ticket-bg-1.svg";
import TicketBG2 from "../assets/ticket-bg-2.svg";
import TicketBG3 from "../assets/ticket-bg-3.svg";
import TicketBG4 from "../assets/ticket-bg-4.svg";
import TicketBG5 from "../assets/ticket-bg-5.svg";
import TicketBG6 from "../assets/ticket-bg-6.svg";
import TicketBG7 from "../assets/ticket-bg-7.svg";
import TicketBG8 from "../assets/ticket-bg-8.svg";
import TicketBG9 from "../assets/ticket-bg-9.svg";
import TicketBG10 from "../assets/ticket-bg-10.svg";
import { AnimatePresence, motion } from "framer-motion";
import { useContext, useEffect, useState } from "react";
import { useNetworkStore } from "@zknoid/sdk/lib/stores/network";
import { useWorkerClientStore } from "../../../../workers/workerClientStore";
import { useNotificationStore } from "@zknoid/sdk/components/shared/Notification/lib/notificationStore";
import Link from "next/link";
import { NetworkIds, NETWORKS } from "@zknoid/sdk/constants/networks";
import { formatUnits } from "@zknoid/sdk/lib/unit";
import LotteryContext from "../../../../lib/contexts/LotteryContext";

const network =
  NETWORKS[process.env.NEXT_PUBLIC_NETWORK_ID || NetworkIds.MINA_DEVNET];

const ticketsImages = [
  TicketBG1,
  TicketBG2,
  TicketBG3,
  TicketBG4,
  TicketBG5,
  TicketBG6,
  TicketBG7,
  TicketBG8,
  TicketBG9,
  TicketBG10,
];

const ClosedTicket = ({
  combination,
  index,
  rounded,
  className,
  onClick,
  funds,
  claimed,
}: {
  combination: number[];
  index: number;
  rounded: "full" | "right";
  className?: string;
  onClick?: () => void;
  funds: bigint | undefined;
  claimed: boolean;
}) => {
  const color =
    rounded == "right"
      ? "bg-middle-accent"
      : index % 2 === 0
        ? "bg-[#FF8961]"
        : "bg-middle-accent";

  return (
    <motion.div
      onClick={onClick ?? onClick}
      className={cn(
        "relative flex h-[11.628vw] lg:!h-[13.53vw] flex-row p-[1.163vw] lg:!p-[0.33vw]",
        !funds && color,
        {
          "rounded-r-[1.33vw]": rounded == "right",
          "rounded-[23.256vw] lg:!rounded-[2.604vw]": rounded == "full",
          "cursor-pointer": onClick,
          "bg-foreground": !!funds,
        },
        className,
      )}
      whileHover={onClick && { scale: 1.05 }}
    >
      <div
        className={cn(
          "flex flex-row-reverse lg:!w-auto w-full lg:!flex-col justify-between rounded-[23.256vw] lg:!rounded-[2.604vw] border p-[1.163vw] lg:!p-1",
          { "border-middle-accent": !!funds },
        )}
      >
        <div
          className={
            "my-auto flex lg:!h-[8vw] w-full flex-col lg:!flex-row items-center justify-center gap-1"
          }
        >
          {!funds ? (
            <>
              <div
                className={
                  "flex lg:!h-[8vw] w-[70%] lg:!w-[65%] flex-row lg:!flex-col-reverse justify-between pr-[3.488vw] lg:!pr-0 ml-auto lg:!ml-0"
                }
              >
                {combination.map((item, index) => (
                  <span
                    key={index}
                    className={
                      "lg:!rotate-180 font-plexsans text-[4.651vw] lg:!text-[0.9vw] font-medium lg:![writing-mode:vertical-rl]"
                    }
                  >
                    {item}
                  </span>
                ))}
              </div>
              <span className={"lg:!inline-block hidden h-full w-[55%]"}>
                <svg
                  width="100%"
                  height="100%"
                  viewBox="0 0 10 109"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  className={"h-full w-full rotate-180"}
                >
                  <rect y="106" width="10" height="3" fill="#F9F8F4" />
                  <rect y="95" width="10" height="3" fill="#F9F8F4" />
                  <rect y="8" width="10" height="3" fill="#F9F8F4" />
                  <rect y="40" width="10" height="3" fill="#F9F8F4" />
                  <rect y="68" width="10" height="3" fill="#F9F8F4" />
                  <rect y="82" width="10" height="4" fill="#F9F8F4" />
                  <rect y="17" width="10" height="4" fill="#F9F8F4" />
                  <rect y="63" width="10" height="4" fill="#F9F8F4" />
                  <rect y="104" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="54" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="25" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="101" width="10" height="2" fill="#F9F8F4" />
                  <rect y="14" width="10" height="2" fill="#F9F8F4" />
                  <rect y="46" width="10" height="2" fill="#F9F8F4" />
                  <rect y="51" width="10" height="2" fill="#F9F8F4" />
                  <rect y="22" width="10" height="2" fill="#F9F8F4" />
                  <rect y="92" width="10" height="2" fill="#F9F8F4" />
                  <rect y="5" width="10" height="2" fill="#F9F8F4" />
                  <rect y="2" width="10" height="2" fill="#F9F8F4" />
                  <rect y="37" width="10" height="2" fill="#F9F8F4" />
                  <rect y="89" width="10" height="2" fill="#F9F8F4" />
                  <rect y="34" width="10" height="2" fill="#F9F8F4" />
                  <rect y="79" width="10" height="2" fill="#F9F8F4" />
                  <rect y="76" width="10" height="2" fill="#F9F8F4" />
                  <rect y="58" width="10" height="2" fill="#F9F8F4" />
                  <rect y="29" width="10" height="2" fill="#F9F8F4" />
                  <rect y="99" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="12" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="44" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="49" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="61" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="87" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="32" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="74" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="56" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="27" width="10" height="0.999999" fill="#F9F8F4" />
                  <rect y="72" width="10" height="0.999999" fill="#F9F8F4" />
                </svg>
              </span>
            </>
          ) : (
            <div
              className={
                "my-auto flex lg:!h-[8vw] w-full flex-row items-center justify-center lg:!gap-1 pr-[3.488vw] lg:!pr-0"
              }
            >
              <div
                className={
                  "lg:!h-[8vw] w-full lg:!w-[90%] flex flex-row lg:!flex-col-reverse justify-between text-right lg:!text-left"
                }
              >
                <span
                  className={
                    "hidden lg:!inline-block w-full lg:!rotate-180 font-plexsans text-[4.651vw] lg:!text-[1vw] font-medium uppercase text-middle-accent lg:![writing-mode:vertical-rl]"
                  }
                >
                  {claimed ? "Claimed" : "Claim rewards"}
                </span>
                <span
                  className={
                    "lg:!hidden text-left w-full lg:!rotate-180 font-plexsans text-[4.651vw] lg:!text-[1vw] font-medium uppercase text-middle-accent lg:![writing-mode:vertical-rl]"
                  }
                >
                  {claimed ? "Claimed" : `${formatUnits(funds)} MINA`}
                </span>

                <div
                  className={
                    "lg:!hidden flex flex-row items-center justify-center w-full"
                  }
                >
                  {combination.map((item, index) => (
                    <span
                      key={index}
                      className={
                        "w-full font-plexsans text-[4.651vw] font-medium text-middle-accent"
                      }
                    >
                      {item}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
        <div
          className={cn(
            "flex items-center justify-start lg:!justify-center lg:!p-1",
            funds ? "w-[13%] lg:!w-full" : "w-[70%] lg:!w-full",
          )}
        >
          <div
            className={cn(
              "flex min-h-[7.209vw] lg:!min-h-[1.41vw] min-w-[7.209vw] lg:!min-w-[1.41vw] items-center justify-center rounded-full text-[3.721vw] lg:!text-[0.625vw] ",
              {
                "bg-middle-accent/70 text-foreground": !!funds,
                "bg-[#F9F8F4] text-black": !funds,
              },
            )}
          >
            {index.toString().length == 1 ? "0" + index : index}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default function MyTicket({
  plotteryAddress,
  combination,
  amount,
  index,
  isOpen,
  onClick,
  tags,
  funds,
  claimed,
  roundId,
  hash,
  ticketId,
  claimRequested,
  claimQueue,
}: {
  plotteryAddress: string;
  isOpen: boolean;
  combination: number[];
  amount: number;
  index: number;
  onClick: () => void;
  tags?: string[];
  funds: bigint | undefined;
  claimed: boolean;
  roundId: number;
  hash: string;
  ticketId: number;
  claimRequested: boolean | null;
  claimQueue: number | null;
}) {
  const [isHovered, setIsHovered] = useState<boolean>(false);
  const workerStore = useWorkerClientStore();
  const networkStore = useNetworkStore();
  const notificationStore = useNotificationStore();
  const [isPending, setIsPending] = useState<boolean>(false);
  const [isMobile, setMobile] = useState(false);

  const { addClaimRequestMutation } = useContext(LotteryContext);

  useEffect(() => {
    const checkWidth = () => {
      if (window.innerWidth <= 1024) setMobile(true);
      else setMobile(false);
    };

    checkWidth();
    window.addEventListener("resize", checkWidth);

    return () => {
      window.removeEventListener("resize", checkWidth);
    };
  }, []);

  return (
    <AnimatePresence>
      {isOpen ? (
        <div
          className={cn("relative flex flex-row", {
            "cursor-progress lg:!hover:opacity-80":
              !!funds &&
              !claimed &&
              !workerStore.lotteryCompiled &&
              workerStore.isLocalProving,
          })}
          onClick={() => (!funds ? onClick() : undefined)}
          onMouseEnter={() =>
            !!funds && !claimed && !isMobile ? setIsHovered(true) : undefined
          }
          onMouseLeave={() =>
            !!funds && !claimed && !isMobile ? setIsHovered(false) : undefined
          }
        >
          {claimed && (
            <div
              className={
                "absolute z-[1] flex h-full w-full flex-col items-center justify-center rounded-[1.042vw] bg-bg-grey/80"
              }
            >
              <span
                className={
                  "font-museo text-[5.581vw] lg:!text-[1.667vw] font-bold uppercase text-middle-accent"
                }
              >
                Claimed
              </span>
            </div>
          )}
          {isMobile && !!funds && !claimed ? (
            claimRequested ? (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className={
                  "absolute w-full h-full left-0 top-0 z-[1] flex flex-row justify-end items-start"
                }
              >
                <svg
                  width="64"
                  height="81"
                  viewBox="0 0 64 81"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  className={"w-[15.059vw] mr-[4.706vw]"}
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M59 0H5V50V80.5L32.5 51.5L59 81V50V0Z"
                    fill="#3A3A3A"
                  />
                  <path
                    d="M20.4905 20.144C19.3945 20.144 18.5345 19.776 17.9105 19.04C17.2865 18.296 16.9745 17.22 16.9745 15.812C16.9745 15.108 17.0545 14.488 17.2145 13.952C17.3745 13.416 17.6065 12.964 17.9105 12.596C18.2145 12.228 18.5825 11.952 19.0145 11.768C19.4545 11.576 19.9465 11.48 20.4905 11.48C21.2185 11.48 21.8265 11.64 22.3145 11.96C22.8105 12.28 23.1985 12.752 23.4785 13.376L22.3385 14C22.1945 13.6 21.9705 13.284 21.6665 13.052C21.3705 12.812 20.9785 12.692 20.4905 12.692C19.8425 12.692 19.3345 12.912 18.9665 13.352C18.5985 13.792 18.4145 14.4 18.4145 15.176V16.448C18.4145 17.224 18.5985 17.832 18.9665 18.272C19.3345 18.712 19.8425 18.932 20.4905 18.932C20.9945 18.932 21.4025 18.804 21.7145 18.548C22.0345 18.284 22.2705 17.948 22.4225 17.54L23.5145 18.2C23.2345 18.808 22.8425 19.284 22.3385 19.628C21.8345 19.972 21.2185 20.144 20.4905 20.144ZM26.1879 20C25.7399 20 25.4039 19.888 25.1799 19.664C24.9639 19.432 24.8559 19.112 24.8559 18.704V11.12H26.1639V18.932H27.0279V20H26.1879ZM32.8498 20C32.5058 20 32.2418 19.904 32.0578 19.712C31.8738 19.512 31.7618 19.26 31.7218 18.956H31.6618C31.5418 19.348 31.3218 19.644 31.0018 19.844C30.6818 20.044 30.2938 20.144 29.8378 20.144C29.1898 20.144 28.6898 19.976 28.3378 19.64C27.9938 19.304 27.8218 18.852 27.8218 18.284C27.8218 17.66 28.0458 17.192 28.4938 16.88C28.9498 16.568 29.6138 16.412 30.4858 16.412H31.6138V15.884C31.6138 15.5 31.5098 15.204 31.3018 14.996C31.0938 14.788 30.7698 14.684 30.3298 14.684C29.9618 14.684 29.6618 14.764 29.4298 14.924C29.1978 15.084 29.0018 15.288 28.8418 15.536L28.0618 14.828C28.2698 14.476 28.5618 14.188 28.9378 13.964C29.3138 13.732 29.8058 13.616 30.4138 13.616C31.2218 13.616 31.8418 13.804 32.2738 14.18C32.7058 14.556 32.9218 15.096 32.9218 15.8V18.932H33.5818V20H32.8498ZM30.2098 19.148C30.6178 19.148 30.9538 19.06 31.2178 18.884C31.4818 18.7 31.6138 18.456 31.6138 18.152V17.252H30.5098C29.6058 17.252 29.1538 17.532 29.1538 18.092V18.308C29.1538 18.588 29.2458 18.8 29.4298 18.944C29.6218 19.08 29.8818 19.148 30.2098 19.148ZM35.5237 12.644C35.2517 12.644 35.0517 12.58 34.9237 12.452C34.8037 12.324 34.7437 12.16 34.7437 11.96V11.756C34.7437 11.556 34.8037 11.392 34.9237 11.264C35.0517 11.136 35.2517 11.072 35.5237 11.072C35.7957 11.072 35.9917 11.136 36.1117 11.264C36.2317 11.392 36.2917 11.556 36.2917 11.756V11.96C36.2917 12.16 36.2317 12.324 36.1117 12.452C35.9917 12.58 35.7957 12.644 35.5237 12.644ZM34.8637 13.76H36.1717V20H34.8637V13.76ZM38.0395 20V13.76H39.3475V14.792H39.4075C39.4715 14.632 39.5475 14.48 39.6355 14.336C39.7315 14.192 39.8435 14.068 39.9715 13.964C40.1075 13.852 40.2635 13.768 40.4395 13.712C40.6235 13.648 40.8355 13.616 41.0755 13.616C41.4995 13.616 41.8755 13.72 42.2035 13.928C42.5315 14.136 42.7715 14.456 42.9235 14.888H42.9595C43.0715 14.536 43.2875 14.236 43.6075 13.988C43.9275 13.74 44.3395 13.616 44.8435 13.616C45.4675 13.616 45.9515 13.828 46.2955 14.252C46.6395 14.668 46.8115 15.264 46.8115 16.04V20H45.5035V16.196C45.5035 15.716 45.4115 15.356 45.2275 15.116C45.0435 14.868 44.7515 14.744 44.3515 14.744C44.1835 14.744 44.0235 14.768 43.8715 14.816C43.7195 14.856 43.5835 14.92 43.4635 15.008C43.3515 15.096 43.2595 15.208 43.1875 15.344C43.1155 15.48 43.0795 15.636 43.0795 15.812V20H41.7715V16.196C41.7715 15.228 41.3915 14.744 40.6315 14.744C40.4715 14.744 40.3115 14.768 40.1515 14.816C39.9995 14.856 39.8635 14.92 39.7435 15.008C39.6235 15.096 39.5275 15.208 39.4555 15.344C39.3835 15.48 39.3475 15.636 39.3475 15.812V20H38.0395ZM11.854 32V25.76H13.162V26.96H13.222C13.31 26.64 13.494 26.36 13.774 26.12C14.054 25.88 14.442 25.76 14.938 25.76H15.286V27.02H14.77C14.25 27.02 13.85 27.104 13.57 27.272C13.298 27.44 13.162 27.688 13.162 28.016V32H11.854ZM18.8371 32.144C18.3891 32.144 17.9891 32.068 17.6371 31.916C17.2851 31.764 16.9851 31.548 16.7371 31.268C16.4891 30.98 16.2971 30.636 16.1611 30.236C16.0331 29.828 15.9691 29.376 15.9691 28.88C15.9691 28.384 16.0331 27.936 16.1611 27.536C16.2971 27.128 16.4891 26.784 16.7371 26.504C16.9851 26.216 17.2851 25.996 17.6371 25.844C17.9891 25.692 18.3891 25.616 18.8371 25.616C19.2931 25.616 19.6931 25.696 20.0371 25.856C20.3891 26.016 20.6811 26.24 20.9131 26.528C21.1451 26.808 21.3171 27.136 21.4291 27.512C21.5491 27.888 21.6091 28.292 21.6091 28.724V29.216H17.3251V29.42C17.3251 29.9 17.4651 30.296 17.7451 30.608C18.0331 30.912 18.4411 31.064 18.9691 31.064C19.3531 31.064 19.6771 30.98 19.9411 30.812C20.2051 30.644 20.4291 30.416 20.6131 30.128L21.3811 30.884C21.1491 31.268 20.8131 31.576 20.3731 31.808C19.9331 32.032 19.4211 32.144 18.8371 32.144ZM18.8371 26.636C18.6131 26.636 18.4051 26.676 18.2131 26.756C18.0291 26.836 17.8691 26.948 17.7331 27.092C17.6051 27.236 17.5051 27.408 17.4331 27.608C17.3611 27.808 17.3251 28.028 17.3251 28.268V28.352H20.2291V28.232C20.2291 27.752 20.1051 27.368 19.8571 27.08C19.6091 26.784 19.2691 26.636 18.8371 26.636ZM26.9811 30.968H26.9211C26.7851 31.336 26.5611 31.624 26.2491 31.832C25.9451 32.04 25.5851 32.144 25.1691 32.144C24.3771 32.144 23.7651 31.86 23.3331 31.292C22.9011 30.716 22.6851 29.912 22.6851 28.88C22.6851 27.848 22.9011 27.048 23.3331 26.48C23.7651 25.904 24.3771 25.616 25.1691 25.616C25.5851 25.616 25.9451 25.72 26.2491 25.928C26.5611 26.128 26.7851 26.416 26.9211 26.792H26.9811V25.76H28.2891V34.4H26.9811V30.968ZM25.5651 31.016C25.9651 31.016 26.3011 30.92 26.5731 30.728C26.8451 30.528 26.9811 30.268 26.9811 29.948V27.812C26.9811 27.492 26.8451 27.236 26.5731 27.044C26.3011 26.844 25.9651 26.744 25.5651 26.744C25.1091 26.744 24.7451 26.892 24.4731 27.188C24.2011 27.476 24.0651 27.86 24.0651 28.34V29.42C24.0651 29.9 24.2011 30.288 24.4731 30.584C24.7451 30.872 25.1091 31.016 25.5651 31.016ZM33.9387 30.968H33.8907C33.8347 31.12 33.7587 31.268 33.6627 31.412C33.5747 31.556 33.4587 31.684 33.3147 31.796C33.1787 31.9 33.0107 31.984 32.8107 32.048C32.6187 32.112 32.3947 32.144 32.1387 32.144C31.4907 32.144 30.9867 31.936 30.6267 31.52C30.2747 31.104 30.0987 30.508 30.0987 29.732V25.76H31.4067V29.564C31.4067 30.532 31.8067 31.016 32.6067 31.016C32.7747 31.016 32.9387 30.996 33.0987 30.956C33.2587 30.908 33.3987 30.84 33.5187 30.752C33.6467 30.664 33.7467 30.552 33.8187 30.416C33.8987 30.28 33.9387 30.12 33.9387 29.936V25.76H35.2467V32H33.9387V30.968ZM39.5676 32.144C39.1196 32.144 38.7196 32.068 38.3676 31.916C38.0156 31.764 37.7156 31.548 37.4676 31.268C37.2196 30.98 37.0276 30.636 36.8916 30.236C36.7636 29.828 36.6996 29.376 36.6996 28.88C36.6996 28.384 36.7636 27.936 36.8916 27.536C37.0276 27.128 37.2196 26.784 37.4676 26.504C37.7156 26.216 38.0156 25.996 38.3676 25.844C38.7196 25.692 39.1196 25.616 39.5676 25.616C40.0236 25.616 40.4236 25.696 40.7676 25.856C41.1196 26.016 41.4116 26.24 41.6436 26.528C41.8756 26.808 42.0476 27.136 42.1596 27.512C42.2796 27.888 42.3396 28.292 42.3396 28.724V29.216H38.0556V29.42C38.0556 29.9 38.1956 30.296 38.4756 30.608C38.7636 30.912 39.1716 31.064 39.6996 31.064C40.0836 31.064 40.4076 30.98 40.6716 30.812C40.9356 30.644 41.1596 30.416 41.3436 30.128L42.1116 30.884C41.8796 31.268 41.5436 31.576 41.1036 31.808C40.6636 32.032 40.1516 32.144 39.5676 32.144ZM39.5676 26.636C39.3436 26.636 39.1356 26.676 38.9436 26.756C38.7596 26.836 38.5996 26.948 38.4636 27.092C38.3356 27.236 38.2356 27.408 38.1636 27.608C38.0916 27.808 38.0556 28.028 38.0556 28.268V28.352H40.9596V28.232C40.9596 27.752 40.8356 27.368 40.5876 27.08C40.3396 26.784 39.9996 26.636 39.5676 26.636ZM45.7676 32.144C45.1756 32.144 44.6796 32.04 44.2796 31.832C43.8796 31.624 43.5316 31.336 43.2356 30.968L44.0756 30.2C44.3076 30.48 44.5636 30.7 44.8436 30.86C45.1316 31.012 45.4636 31.088 45.8396 31.088C46.2236 31.088 46.5076 31.016 46.6916 30.872C46.8836 30.72 46.9796 30.512 46.9796 30.248C46.9796 30.048 46.9116 29.88 46.7756 29.744C46.6476 29.6 46.4196 29.508 46.0916 29.468L45.5156 29.396C44.8756 29.316 44.3716 29.132 44.0036 28.844C43.6436 28.548 43.4636 28.112 43.4636 27.536C43.4636 27.232 43.5196 26.964 43.6316 26.732C43.7436 26.492 43.8996 26.292 44.0996 26.132C44.3076 25.964 44.5516 25.836 44.8316 25.748C45.1196 25.66 45.4356 25.616 45.7796 25.616C46.3396 25.616 46.7956 25.704 47.1476 25.88C47.5076 26.056 47.8276 26.3 48.1076 26.612L47.3036 27.38C47.1436 27.188 46.9316 27.024 46.6676 26.888C46.4116 26.744 46.1156 26.672 45.7796 26.672C45.4196 26.672 45.1516 26.744 44.9756 26.888C44.8076 27.032 44.7236 27.22 44.7236 27.452C44.7236 27.692 44.7996 27.872 44.9516 27.992C45.1036 28.112 45.3476 28.2 45.6836 28.256L46.2596 28.328C46.9476 28.432 47.4476 28.636 47.7596 28.94C48.0796 29.236 48.2396 29.636 48.2396 30.14C48.2396 30.444 48.1796 30.72 48.0596 30.968C47.9476 31.208 47.7836 31.416 47.5676 31.592C47.3516 31.768 47.0916 31.904 46.7876 32C46.4836 32.096 46.1436 32.144 45.7676 32.144ZM51.3632 32C50.9072 32 50.5632 31.884 50.3312 31.652C50.0992 31.412 49.9832 31.076 49.9832 30.644V26.828H49.0112V25.76H49.5392C49.7552 25.76 49.9032 25.712 49.9832 25.616C50.0712 25.52 50.1152 25.364 50.1152 25.148V24.056H51.2912V25.76H52.5992V26.828H51.2912V30.932H52.5032V32H51.3632ZM22.9453 44.144C22.3533 44.144 21.8573 44.04 21.4573 43.832C21.0573 43.624 20.7093 43.336 20.4133 42.968L21.2533 42.2C21.4853 42.48 21.7413 42.7 22.0213 42.86C22.3093 43.012 22.6413 43.088 23.0173 43.088C23.4013 43.088 23.6853 43.016 23.8693 42.872C24.0613 42.72 24.1573 42.512 24.1573 42.248C24.1573 42.048 24.0893 41.88 23.9533 41.744C23.8253 41.6 23.5973 41.508 23.2693 41.468L22.6933 41.396C22.0533 41.316 21.5493 41.132 21.1813 40.844C20.8213 40.548 20.6413 40.112 20.6413 39.536C20.6413 39.232 20.6973 38.964 20.8093 38.732C20.9213 38.492 21.0773 38.292 21.2773 38.132C21.4853 37.964 21.7293 37.836 22.0093 37.748C22.2973 37.66 22.6133 37.616 22.9573 37.616C23.5173 37.616 23.9733 37.704 24.3253 37.88C24.6853 38.056 25.0053 38.3 25.2853 38.612L24.4813 39.38C24.3213 39.188 24.1093 39.024 23.8453 38.888C23.5893 38.744 23.2933 38.672 22.9573 38.672C22.5973 38.672 22.3293 38.744 22.1533 38.888C21.9853 39.032 21.9013 39.22 21.9013 39.452C21.9013 39.692 21.9773 39.872 22.1293 39.992C22.2813 40.112 22.5253 40.2 22.8613 40.256L23.4373 40.328C24.1253 40.432 24.6253 40.636 24.9373 40.94C25.2573 41.236 25.4173 41.636 25.4173 42.14C25.4173 42.444 25.3573 42.72 25.2373 42.968C25.1253 43.208 24.9613 43.416 24.7453 43.592C24.5293 43.768 24.2693 43.904 23.9653 44C23.6613 44.096 23.3213 44.144 22.9453 44.144ZM29.343 44.144C28.895 44.144 28.495 44.068 28.143 43.916C27.791 43.764 27.491 43.548 27.243 43.268C26.995 42.98 26.803 42.636 26.667 42.236C26.539 41.828 26.475 41.376 26.475 40.88C26.475 40.384 26.539 39.936 26.667 39.536C26.803 39.128 26.995 38.784 27.243 38.504C27.491 38.216 27.791 37.996 28.143 37.844C28.495 37.692 28.895 37.616 29.343 37.616C29.799 37.616 30.199 37.696 30.543 37.856C30.895 38.016 31.187 38.24 31.419 38.528C31.651 38.808 31.823 39.136 31.935 39.512C32.055 39.888 32.115 40.292 32.115 40.724V41.216H27.831V41.42C27.831 41.9 27.971 42.296 28.251 42.608C28.539 42.912 28.947 43.064 29.475 43.064C29.859 43.064 30.183 42.98 30.447 42.812C30.711 42.644 30.935 42.416 31.119 42.128L31.887 42.884C31.655 43.268 31.319 43.576 30.879 43.808C30.439 44.032 29.927 44.144 29.343 44.144ZM29.343 38.636C29.119 38.636 28.911 38.676 28.719 38.756C28.535 38.836 28.375 38.948 28.239 39.092C28.111 39.236 28.011 39.408 27.939 39.608C27.867 39.808 27.831 40.028 27.831 40.268V40.352H30.735V40.232C30.735 39.752 30.611 39.368 30.363 39.08C30.115 38.784 29.775 38.636 29.343 38.636ZM33.563 44V37.76H34.871V38.792H34.931C35.067 38.456 35.271 38.176 35.543 37.952C35.823 37.728 36.203 37.616 36.683 37.616C37.323 37.616 37.819 37.828 38.171 38.252C38.531 38.668 38.711 39.264 38.711 40.04V44H37.403V40.208C37.403 39.232 37.011 38.744 36.227 38.744C36.059 38.744 35.891 38.768 35.723 38.816C35.563 38.856 35.419 38.92 35.291 39.008C35.163 39.096 35.059 39.208 34.979 39.344C34.907 39.48 34.871 39.64 34.871 39.824V44H33.563ZM42.2519 44C41.7959 44 41.4519 43.884 41.2199 43.652C40.9879 43.412 40.8719 43.076 40.8719 42.644V38.828H39.8999V37.76H40.4279C40.6439 37.76 40.7919 37.712 40.8719 37.616C40.9599 37.52 41.0039 37.364 41.0039 37.148V36.056H42.1799V37.76H43.4879V38.828H42.1799V42.932H43.3919V44H42.2519Z"
                    fill="#FF5B23"
                  />
                </svg>
              </motion.div>
            ) : (
              <motion.button
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                onClick={() => {
                  if (claimRequested) {
                    notificationStore.create({
                      type: "error",
                      message: `Claim already requested, Queue ${claimQueue}`,
                    });
                    return;
                  }
                  const claimRequest = {
                    userAddress: networkStore.address!,
                    roundId,
                    ticketId,
                  };
                  addClaimRequestMutation(claimRequest);

                  notificationStore.create({
                    type: "success",
                    message: "Claim request sent",
                    isDismissible: true,
                    dismissAfterDelay: true,
                  });
                }}
                disabled={workerStore.isActiveTx}
                className={
                  "absolute w-full h-full left-0 top-0 z-[1] flex flex-row justify-end items-start"
                }
              >
                <svg
                  width="64"
                  height="81"
                  viewBox="0 0 64 81"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  className={"w-[15.059vw] mr-[4.706vw]"}
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M59 0H5V50V80.5L32.5 51.5L59 81V50V0Z"
                    fill="#3A3A3A"
                  />
                  <path
                    d="M15.7619 26.144C14.6659 26.144 13.8059 25.776 13.1819 25.04C12.5579 24.296 12.2459 23.22 12.2459 21.812C12.2459 21.108 12.3259 20.488 12.4859 19.952C12.6459 19.416 12.8779 18.964 13.1819 18.596C13.4859 18.228 13.8539 17.952 14.2859 17.768C14.7259 17.576 15.2179 17.48 15.7619 17.48C16.4899 17.48 17.0979 17.64 17.5859 17.96C18.0819 18.28 18.4699 18.752 18.7499 19.376L17.6099 20C17.4659 19.6 17.2419 19.284 16.9379 19.052C16.6419 18.812 16.2499 18.692 15.7619 18.692C15.1139 18.692 14.6059 18.912 14.2379 19.352C13.8699 19.792 13.6859 20.4 13.6859 21.176V22.448C13.6859 23.224 13.8699 23.832 14.2379 24.272C14.6059 24.712 15.1139 24.932 15.7619 24.932C16.2659 24.932 16.6739 24.804 16.9859 24.548C17.3059 24.284 17.5419 23.948 17.6939 23.54L18.7859 24.2C18.5059 24.808 18.1139 25.284 17.6099 25.628C17.1059 25.972 16.4899 26.144 15.7619 26.144ZM21.4594 26C21.0114 26 20.6754 25.888 20.4514 25.664C20.2354 25.432 20.1274 25.112 20.1274 24.704V17.12H21.4354V24.932H22.2994V26H21.4594ZM24.2093 18.644C23.9373 18.644 23.7373 18.58 23.6093 18.452C23.4893 18.324 23.4293 18.16 23.4293 17.96V17.756C23.4293 17.556 23.4893 17.392 23.6093 17.264C23.7373 17.136 23.9373 17.072 24.2093 17.072C24.4813 17.072 24.6773 17.136 24.7973 17.264C24.9173 17.392 24.9773 17.556 24.9773 17.756V17.96C24.9773 18.16 24.9173 18.324 24.7973 18.452C24.6773 18.58 24.4813 18.644 24.2093 18.644ZM23.5493 19.76H24.8573V26H23.5493V19.76ZM29.1371 26.144C28.6891 26.144 28.2891 26.068 27.9371 25.916C27.5851 25.764 27.2891 25.548 27.0491 25.268C26.8091 24.98 26.6251 24.636 26.4971 24.236C26.3691 23.828 26.3051 23.376 26.3051 22.88C26.3051 22.384 26.3691 21.936 26.4971 21.536C26.6251 21.128 26.8091 20.784 27.0491 20.504C27.2891 20.216 27.5851 19.996 27.9371 19.844C28.2891 19.692 28.6891 19.616 29.1371 19.616C29.7611 19.616 30.2731 19.756 30.6731 20.036C31.0731 20.316 31.3651 20.688 31.5491 21.152L30.4691 21.656C30.3811 21.368 30.2251 21.14 30.0011 20.972C29.7851 20.796 29.4971 20.708 29.1371 20.708C28.6571 20.708 28.2931 20.86 28.0451 21.164C27.8051 21.46 27.6851 21.848 27.6851 22.328V23.444C27.6851 23.924 27.8051 24.316 28.0451 24.62C28.2931 24.916 28.6571 25.064 29.1371 25.064C29.5211 25.064 29.8251 24.972 30.0491 24.788C30.2811 24.596 30.4651 24.344 30.6011 24.032L31.5971 24.56C31.3891 25.072 31.0771 25.464 30.6611 25.736C30.2451 26.008 29.7371 26.144 29.1371 26.144ZM32.8423 17.12H34.1503V22.568H34.2103L35.0742 21.452L36.5743 19.76H38.0983L35.9143 22.172L38.3623 26H36.8023L35.0143 23.024L34.1503 23.96V26H32.8423V17.12ZM43.9687 26C43.5127 26 43.1687 25.884 42.9367 25.652C42.7047 25.412 42.5887 25.076 42.5887 24.644V20.828H41.6167V19.76H42.1447C42.3607 19.76 42.5087 19.712 42.5887 19.616C42.6767 19.52 42.7207 19.364 42.7207 19.148V18.056H43.8967V19.76H45.2047V20.828H43.8967V24.932H45.1087V26H43.9687ZM49.0246 26.144C48.5926 26.144 48.1966 26.068 47.8366 25.916C47.4846 25.764 47.1846 25.548 46.9366 25.268C46.6886 24.98 46.4966 24.636 46.3606 24.236C46.2246 23.828 46.1566 23.376 46.1566 22.88C46.1566 22.384 46.2246 21.936 46.3606 21.536C46.4966 21.128 46.6886 20.784 46.9366 20.504C47.1846 20.216 47.4846 19.996 47.8366 19.844C48.1966 19.692 48.5926 19.616 49.0246 19.616C49.4566 19.616 49.8486 19.692 50.2006 19.844C50.5606 19.996 50.8646 20.216 51.1126 20.504C51.3606 20.784 51.5526 21.128 51.6886 21.536C51.8246 21.936 51.8926 22.384 51.8926 22.88C51.8926 23.376 51.8246 23.828 51.6886 24.236C51.5526 24.636 51.3606 24.98 51.1126 25.268C50.8646 25.548 50.5606 25.764 50.2006 25.916C49.8486 26.068 49.4566 26.144 49.0246 26.144ZM49.0246 25.064C49.4726 25.064 49.8326 24.928 50.1046 24.656C50.3766 24.376 50.5126 23.96 50.5126 23.408V22.352C50.5126 21.8 50.3766 21.388 50.1046 21.116C49.8326 20.836 49.4726 20.696 49.0246 20.696C48.5766 20.696 48.2166 20.836 47.9446 21.116C47.6726 21.388 47.5366 21.8 47.5366 22.352V23.408C47.5366 23.96 47.6726 24.376 47.9446 24.656C48.2166 24.928 48.5766 25.064 49.0246 25.064ZM20.4066 38.144C19.9586 38.144 19.5586 38.068 19.2066 37.916C18.8546 37.764 18.5586 37.548 18.3186 37.268C18.0786 36.98 17.8946 36.636 17.7666 36.236C17.6386 35.828 17.5746 35.376 17.5746 34.88C17.5746 34.384 17.6386 33.936 17.7666 33.536C17.8946 33.128 18.0786 32.784 18.3186 32.504C18.5586 32.216 18.8546 31.996 19.2066 31.844C19.5586 31.692 19.9586 31.616 20.4066 31.616C21.0306 31.616 21.5426 31.756 21.9426 32.036C22.3426 32.316 22.6346 32.688 22.8186 33.152L21.7386 33.656C21.6506 33.368 21.4946 33.14 21.2706 32.972C21.0546 32.796 20.7666 32.708 20.4066 32.708C19.9266 32.708 19.5626 32.86 19.3146 33.164C19.0746 33.46 18.9546 33.848 18.9546 34.328V35.444C18.9546 35.924 19.0746 36.316 19.3146 36.62C19.5626 36.916 19.9266 37.064 20.4066 37.064C20.7906 37.064 21.0946 36.972 21.3186 36.788C21.5506 36.596 21.7346 36.344 21.8706 36.032L22.8666 36.56C22.6586 37.072 22.3466 37.464 21.9306 37.736C21.5146 38.008 21.0066 38.144 20.4066 38.144ZM25.4438 38C24.9958 38 24.6598 37.888 24.4358 37.664C24.2198 37.432 24.1118 37.112 24.1118 36.704V29.12H25.4198V36.932H26.2838V38H25.4438ZM32.1057 38C31.7617 38 31.4977 37.904 31.3137 37.712C31.1297 37.512 31.0177 37.26 30.9777 36.956H30.9177C30.7977 37.348 30.5777 37.644 30.2577 37.844C29.9377 38.044 29.5497 38.144 29.0937 38.144C28.4457 38.144 27.9457 37.976 27.5937 37.64C27.2497 37.304 27.0777 36.852 27.0777 36.284C27.0777 35.66 27.3017 35.192 27.7497 34.88C28.2057 34.568 28.8697 34.412 29.7417 34.412H30.8697V33.884C30.8697 33.5 30.7657 33.204 30.5577 32.996C30.3497 32.788 30.0257 32.684 29.5857 32.684C29.2177 32.684 28.9177 32.764 28.6857 32.924C28.4537 33.084 28.2577 33.288 28.0977 33.536L27.3177 32.828C27.5257 32.476 27.8177 32.188 28.1937 31.964C28.5697 31.732 29.0617 31.616 29.6697 31.616C30.4777 31.616 31.0977 31.804 31.5297 32.18C31.9617 32.556 32.1777 33.096 32.1777 33.8V36.932H32.8377V38H32.1057ZM29.4657 37.148C29.8737 37.148 30.2097 37.06 30.4737 36.884C30.7377 36.7 30.8697 36.456 30.8697 36.152V35.252H29.7657C28.8617 35.252 28.4097 35.532 28.4097 36.092V36.308C28.4097 36.588 28.5017 36.8 28.6857 36.944C28.8777 37.08 29.1377 37.148 29.4657 37.148ZM34.7796 30.644C34.5076 30.644 34.3076 30.58 34.1796 30.452C34.0596 30.324 33.9996 30.16 33.9996 29.96V29.756C33.9996 29.556 34.0596 29.392 34.1796 29.264C34.3076 29.136 34.5076 29.072 34.7796 29.072C35.0516 29.072 35.2476 29.136 35.3676 29.264C35.4876 29.392 35.5476 29.556 35.5476 29.756V29.96C35.5476 30.16 35.4876 30.324 35.3676 30.452C35.2476 30.58 35.0516 30.644 34.7796 30.644ZM34.1196 31.76H35.4276V38H34.1196V31.76ZM37.2954 38V31.76H38.6034V32.792H38.6634C38.7274 32.632 38.8034 32.48 38.8914 32.336C38.9874 32.192 39.0994 32.068 39.2274 31.964C39.3634 31.852 39.5194 31.768 39.6954 31.712C39.8794 31.648 40.0914 31.616 40.3314 31.616C40.7554 31.616 41.1314 31.72 41.4594 31.928C41.7874 32.136 42.0274 32.456 42.1794 32.888H42.2154C42.3274 32.536 42.5434 32.236 42.8634 31.988C43.1834 31.74 43.5954 31.616 44.0994 31.616C44.7234 31.616 45.2074 31.828 45.5514 32.252C45.8954 32.668 46.0674 33.264 46.0674 34.04V38H44.7594V34.196C44.7594 33.716 44.6674 33.356 44.4834 33.116C44.2994 32.868 44.0074 32.744 43.6074 32.744C43.4394 32.744 43.2794 32.768 43.1274 32.816C42.9754 32.856 42.8394 32.92 42.7194 33.008C42.6074 33.096 42.5154 33.208 42.4434 33.344C42.3714 33.48 42.3354 33.636 42.3354 33.812V38H41.0274V34.196C41.0274 33.228 40.6474 32.744 39.8874 32.744C39.7274 32.744 39.5674 32.768 39.4074 32.816C39.2554 32.856 39.1194 32.92 38.9994 33.008C38.8794 33.096 38.7834 33.208 38.7114 33.344C38.6394 33.48 38.6034 33.636 38.6034 33.812V38H37.2954Z"
                    fill="#FF5B23"
                  />
                </svg>
              </motion.button>
            )
          ) : undefined}
          {isHovered &&
            !claimed &&
            (workerStore.lotteryCompiled || !workerStore.isLocalProving) && (
              <motion.button
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                onClick={() => {
                  if (claimRequested) return;

                  const claimRequest = {
                    userAddress: networkStore.address!,
                    roundId,
                    ticketId,
                  };
                  addClaimRequestMutation(claimRequest);

                  notificationStore.create({
                    type: "success",
                    message: `Claim request sent`,
                    isDismissible: true,
                    dismissAfterDelay: true,
                  });
                }}
                disabled={workerStore.isActiveTx}
                className={
                  "absolute z-[1] flex h-full w-full cursor-pointer flex-col items-center justify-center rounded-[1.042vw] bg-bg-grey/80"
                }
              >
                <span
                  className={
                    "font-museo text-[1.667vw] font-bold uppercase text-middle-accent"
                  }
                >
                  {claimRequested ? (
                    <div
                      className={
                        "flex flex-col gap-[0.521vw] items-center justify-center"
                      }
                    >
                      <div className={"relative w-[2.396vw] h-[2.396vw]"}>
                        <motion.span
                          className={
                            "w-[2.396vw] h-[2.396vw] absolute left-0 top-0 box-border block rounded-[50%] border-[0.365vw] border-solid border-middle-accent border-t-foreground"
                          }
                          animate={{ rotate: 360 }}
                          transition={{
                            repeat: Infinity,
                            ease: "easeInOut",
                            duration: 1,
                          }}
                        />
                      </div>
                      <span>Claim in the process</span>
                    </div>
                  ) : (
                    "Click to claim ticket"
                  )}
                </span>
              </motion.button>
            )}
          <div
            className={cn(
              "relative h-[46.512vw] lg:!h-[13.53vw] w-full lg:!w-[24vw] rounded-[4.651vw] lg:!rounded-[1.33vw] lg:!rounded-r-none p-[1.163vw] lg:!p-[0.33vw]",
              {
                "bg-middle-accent": !funds,
                "bg-foreground": !!funds,
              },
            )}
          >
            <div
              className={cn(
                "hidden lg:!block pointer-events-none absolute h-[44.5vw] lg:!h-[12.87vw] w-[98%] lg:!w-[23.33vw] overflow-hidden rounded-[4.651vw] lg:!rounded-[1vw]",
                { border: !funds },
              )}
            />
            <div className="relative z-0 flex h-full w-full flex-col p-[3.488vw] lg:!p-[1.33vw]">
              <div className="flex flex-row">
                <div
                  className={cn("text-[5.581vw] lg:!text-[1.6vw] uppercase", {
                    "text-foreground": !funds,
                    "text-middle-accent": !!funds,
                  })}
                >
                  Ticket {index}
                </div>
              </div>
              <div className="flex flex-row gap-[1.163vw] lg:!gap-[0.33vw]">
                {combination.map((fieldId, index) => (
                  <div
                    key={index}
                    className={cn(
                      "h-[9.302vw] lg:!h-[2.67vw] w-[9.302vw] lg:!w-[2.67vw] rounded-[1.163vw] lg:!rounded-[0.33vw] border-[0.07vw] border-foreground shadow-[inset_5px_5px_5px_#CF3500,inset_-5px_-5px_5px_rgba(255,91,35,0.5)]",
                      "z-[1] flex items-center justify-center bg-middle-accent font-museo text-[7.442vw] lg:!text-[2.13vw] font-bold text-foreground",
                    )}
                  >
                    {fieldId}
                  </div>
                ))}
              </div>
              <div className={"mt-auto flex flex-row gap-[0.33vw]"}>
                <div
                  className={
                    "flex items-center justify-center rounded-[1.163vw] lg:!rounded-[0.33vw] border-[0.07vw] bg-middle-accent px-[0.93vw] lg:!px-[0.3vw] py-[1.047vw] lg:!py-[0.15vw] font-plexsans text-[3.721vw] lg:!text-[0.8vw] font-medium"
                  }
                >
                  {amount} {amount > 1 ? "Tickets" : "Ticket"}
                </div>
                {isPending && (
                  <div
                    className={
                      "flex items-center justify-center rounded-[1.163vw] lg:!rounded-[0.33vw] border-[0.07vw] bg-middle-accent px-[0.93vw] lg:!px-[0.3vw] py-[1.047vw] lg:!py-[0.15vw] font-plexsans text-[3.721vw] lg:!text-[0.8vw] font-medium"
                    }
                  >
                    Pending
                  </div>
                )}
                {tags &&
                  tags.map((item, index) => (
                    <div
                      key={index}
                      className={
                        "flex items-center justify-center rounded-[1.163vw] lg:!rounded-[0.33vw] border-[0.07vw] bg-middle-accent px-[0.93vw] lg:!px-[0.3vw] py-[1.047vw] lg:!py-[0.15vw] font-plexsans text-[3.721vw] lg:!text-[0.8vw] font-medium"
                      }
                    >
                      {item}
                    </div>
                  ))}
                <Link
                  href={`${network.minscanUrl}/tx/${hash}?type=zk-tx`}
                  target={"_blank"}
                  rel={"noopener noreferrer"}
                  className={
                    "flex cursor-pointer items-center justify-center rounded-[1.163vw] lg:!rounded-[0.33vw] border-[0.07vw] bg-middle-accent px-[0.93vw] lg:!px-[0.3vw] py-[1.047vw] lg:!py-[0.15vw] font-plexsans text-[3.721vw] lg:!text-[0.8vw] font-medium hover:bg-[#FF6B38]"
                  }
                >
                  Transaction link
                </Link>
              </div>
              <Image
                src={ticketsImages[combination[0] - 1]}
                alt={"Lottery Ticket"}
                className={
                  "absolute left-0 top-0 -z-[1] h-full w-full rounded-[3.488vw] lg:!rounded-[1vw] object-cover object-center p-[0.233vw] lg:!p-px border-[0.07vw] border-foreground"
                }
              />
            </div>
          </div>
          <div className={"lg:!flex hidden flex-row"}>
            <div
              className={cn("flex flex-col items-center justify-between", {
                "bg-middle-accent": !funds,
                "bg-foreground": !!funds,
              })}
            >
              <div
                className={
                  "-mt-[0.57vw] h-[1.15vw] w-[1.15vw] rounded-full bg-bg-grey"
                }
              />
              {[...Array(16)].map((_, index) => (
                <div
                  key={index}
                  className={"h-[0.31vw] w-[0.31vw] rounded-full bg-bg-grey"}
                />
              ))}
              <div
                className={
                  "-mb-[0.57vw] h-[1.15vw] w-[1.15vw] rounded-full bg-bg-grey"
                }
              />
            </div>
            <ClosedTicket
              combination={combination}
              index={index}
              rounded={"right"}
              funds={funds}
              claimed={claimed}
            />
          </div>
        </div>
      ) : (
        <ClosedTicket
          combination={combination}
          index={index}
          rounded={"full"}
          onClick={onClick}
          funds={funds}
          claimed={claimed}
        />
      )}
    </AnimatePresence>
  );
}
